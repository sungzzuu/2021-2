5장. 데이터 전송하기 가장 핵심

<1차시>
- 어떻게 메세지를 설계해서 주고받을지
- 어떤 데이터를 어떻게 묶어서 얼마나 자주 주고받을지 정한다.

ex> 그림판
- 주고받아야할 데이터: 직선의 시작과 끝점. 선의 두께, 색상 정보 등
-	메세지 정의의 종류는 매우 다양. 개발자의 역할. 
	보내는쪽, 받는쪽의 합의만 있으면됨 -> 이게 애플리케이션 프로토콜
- 구조체를 읽어들을때 타입정보를 넣어서 직선, 원 구분하고 뒤의 데이터를 구분하면 된다.
- 애플리케이션 프로토콜의 설계가 실력을 좌우
- 텀프에서 중점적으로 다룸

<2차시>
데이터 전송 경계 구분

- 구조체 멤버 맞춤의 예
10바이트인데 16바이트가 전송되는 이유?
: 32비트 OS에서 메모리접근을 4바이트씩 진행하기때문. c가 b 뒤의 남은 3바이트를 차지하지않고 새로 4바이트 취함.
  이는 메모리를 낭비하고 접근을 쉽게하기 위함. 6바이트를 쓸모없이 보내게 됨(오버헤드)

다양한 데이터 전송 방식
1. 고정 길이 데이터 전송 : 클,서 모두 같은 크기 지정 후 주고받음
2. 가변 길이 데이터 전송: \n,\r\n 사용
3. 고정 + 가변 길이 데이터 전송: 오버헤드가 있긴 하지만 가장 많이 사용
4. 데이터 전송 후 종료: recv() 함수가 전송 종료시 0을 리턴하는 특성을 사용




  
