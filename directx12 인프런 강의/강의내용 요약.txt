<1. 프로젝트 설정>
- 미리 컴파일된 헤더 설정 방법: 미리컴파일된헤더 사용-> stdafx.cpp를 만들기로 바꾼다
- 스마트 포인트 unique_ptr 사용
- 엔진만들어서 재사용 용이하도록
- 정적라이브러리 -> 관리하기 편함
- 동적 연결 라이브러리->프로그램이 실행하는 시점에 꽂아준다

<2. 장치 초기화>
- ::을 붙이는건 윈도우가 제공하는 함수를 쓴다는 표시!

- Fence - CommandQueue: 일감을 외주로 주고 일감이 다 끝날때까지 기다리겠다 -> Fence. 멀티스레드 사용
- 렌더타겟 -> 그림을 그릴 타겟!

<3. 삼각형 그리기>

- descriptor를 리소스와 같은 위치에 놓도록 코드 수정
- ctrl + r + r: 이름 바꾸기 단축키
- Engine 파일에 있는 변수 꺼내쓸 준비
- Get 함수 만들기

<4. Constant Buffer>
 - 하나의 공간에 두는게 아닌 공간을 만들고 차례로 넣는 개념 알것!
https://docs.microsoft.com/en-us/windows/win32/direct3d12/example-root-signatures
- // 테이블 사용 안하는 버전
  //param[0].InitAsConstantBufferView(0); // 0번 -> b0 -> CBV
  //param[1].InitAsConstantBufferView(1); // 1번 -> b1 -> CBV
<5. Root Signature>
- table을 만들기 -> 메모리가 64DWORD가 최대라서 다른 공간을 가르키는 테이블을 만든다.
- 	//CMD_LIST->SetDescriptorHeaps();
	//// 하나씩만 바인딩 가능
	//// 프레임당 한번만 설정
	//// 큰 사이즈로 만들고. 그 중에서 선택하도록. 여러개 만드는게 아니라 크게 만들고 나누기
	//CMD_LIST->SetGraphicsRootDescriptorTable(); // 배열중 몇번째 사용할지
- _countof()매크로: 배열의 크기 알아냄
- 하나씩 채워준다음에 다음 테이블로 넘어감
- 커맨드큐에서 어떤힙을 사용할지 지정하고(SetDescriptorHeaps()) 테이블을 지정해야한다.(SetGraphicsRootDescriptorTable())
- //D3D12_GPU_VIRTUAL_ADDRESS address = GetGpuVirtualAddress(m_currentIndex);
  //CMD_LIST->SetGraphicsRootConstantBufferView(rootParamIndex, address);
  => 루트 디스크립터가 없으므로 크러쉬발생!


<5. Index Buffer>
- 삼각형 메쉬를 하나 만들지만, 2개를 그린다. 실질적인 정보는 하나만 만든다. GPU에 정점정보를 넘기는 작업은 부하가 심해서 한번만
  넣어둔 정보로 여러 개 배치 가능. 공통적인 메쉬정보를 이용하는게 가장 중요
- 인덱스 버퍼를 사용하여 정점의 개수를 줄임! VBV - IBV


