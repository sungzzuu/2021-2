겜소공 6주차-2

Git 기초
- 서버 DB와 작업 PC DB가 거의 동일
- 저장소 전부가 복제 -> clone
- 문제 발생 시 복제물로 복구
- 최신 버전 끌어오는 것 -> 모든 데이터 백업

- CVCS: 파일 목록을 관리 
- Git VCS: 파일 링크를 관리 / 변한 것만 저장한다. 포인터로 주소만 저장하는 것과 비슷. 앞버전의 데이터의 주소값을 가지고 있는다. 포인터의 집합
  -> 매우 많은 브런치를 만드는 근거가 된다.

- 대부분 로컬에서 실행됨
	: 네크워크 사용 최소화 (클론할때 시간 많이들고 점점 시간 줄어듬)
	: 오프라인 상태에서도 작업 가능 (커밋 가능) -> 장소에 상관 없이 작업 가능. 나만의 버전 여러개 만들고 괜찮은 것만 push할 수 있음

- 무결성: 데이터를 체크섬 형태로 관리. 중복 데이터가 없음. 소스코드 경우 효과적
- 데이터 삭제 불가: 모든 변화는 데이터를 추가함으로서 이루어짐. 
		데이터가 없어졌다-> 변화로 인식하고. 삭제가 되었다라는 정보를 추가하는 방식
		conflict가 일어나게 된다.

겜소공 7주차-1

Git 저장소 만들기
- git init
	: .git 디렉토리가 생성됨 (이 폴도가 git repository의 핵심)
	 git clone은 다른 곳에서 git init으로 만들어진 repository를 복제하는 것

- 수정하고 저장소에 저장하기
- vim a.txt -> txt 에디터
- 명령어 입력모드로 시작
- i: 입력모드
- esc: 명령어 입력모드로
- :wq : w는 저장,  q는 나가기
- 삭제에 예민 -> 다양한 방식으로 체크함
- untracked files: a.txt

실습
- 경로 옆에 ()안에 있는게 현재 위치 ex>master
- 커밋시 added가 아닌 changed, 1 insertion(a라는 알파벳)



겜소공 7주차-2

- git status: 파일 상태 확인하기
- cli(command line interface): 기본을 알기 위해 좋음. 툴들은 이를 기반으로 보여주는 것
- cli에서 (master)같은게 안뜨면 깃에서 관리하는 폴더가 아님. 뜬다면 상위폴더로 올라가서 확인하기

- 작업위치 뒤에 이름이 현재 브렌치
- .git 폴더 만들기: git init을 통해 -> Git에서 해당 폴더를 관리함
- 폴더 하나만 유지!!
- cat a.txt: a.txt 파일을 띄워준다.
- 빨간색: 경고의 표시. 작업을 하지 않으면 날아갈 위험이 있다.

- -s:
- 파일 단계 표 외우기.
- staged: Add된 파일. git에 올릴 후보. 리포지토리에 반영되기 이전 단계. 중간 단계
- add: 의미를 가지는 두가지 상태-> Untracked, Modified / 변화를 반영할 준비를 해라. 
- tab 명령어: 자동완성
- 초록색: WD와 Staging Area와의 차이. 
- new: Staging Area와 repo의 차이



































